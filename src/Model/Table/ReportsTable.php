<?php
/**
 * Created by PhpStorm.
 * User: snguyenone
 * Date: 9/27/18
 * Time: 19:31
 */

namespace App\Model\Table;

use App\Model\Entity\Role;

class ReportsTable extends AppTable
{
	public function initialize(array $config)
	{
		$this->addBehavior('Timestamp');
		$this->belongsTo('Users');
		$this->belongsTo('Formats');
		$this->belongsTo('Provinces');
		$this->belongsTo('Districts');
		$this->belongsTo('Wards');
	}
	
	/**
	 * @param string $type
	 * @param array $options
	 * @return \Cake\ORM\Query
	 */
	public function find($type = 'all', $options = [])
	{
		return parent::find($type, $options); // TODO: Change the autogenerated stub
	}
	
	/**
	 * @param $userInfo
	 * @param string $role
	 * @return array|\Cake\ORM\Query
	 */
	public function getReportFollowUser($userInfo)
	{
		$report = $this->findByUserId($userInfo['id']);
		
		return $report->contain(['Users', 'Formats'])->order(['Reports.type' => "DESC", 'Reports.modified' => 'DESC']);
	}
	
	/**
	 * @param $userInfo
	 * @param array $option
	 * @return array|\Cake\ORM\Query
	 */
	public function buildConditionReport($userInfo, array $option = [])
	{
		$roleData    = $userInfo['role'];
		$result      = $this->find();
		
		$condition   = array_merge(['Reports.user_id <>' => $userInfo['id']], $option);
		
		if (isset($option['search'])) {
			$condition['Reports.title LIKE '] = $option['search'] . '%';
		}
		
		if (RolesTable::isRoleAdmin($roleData['name']) && !isset($option['load-type'])) {
			unset($condition['search']);
			return $result->where($condition);
		}

		if (isset($option['load-type'])) {
			$loadType = explode('_', $option['load-type']);
			$condition['Reports.' . $loadType[0] . '_id'] = $loadType[1];
		} else {
			$condition['Reports.' . $roleData['name'] . '_id'] = $userInfo[$roleData['name'] . '_id'];
		}
		
		if (!RolesTable::isRoleAdmin($roleData['name'])) {
			$condition['Reports.user_send'] = $userInfo['id'];
		}
		
		unset($condition['load-type']);
		unset($condition['search']);

		return $result->where($condition);
	}
	
	/**
	 * @param $userInfo
	 * @param array $option
	 * @return array|\Cake\ORM\Query
	 */
	public function getReportForDashboard($userInfo, array $option = [])
	{
		$contain  = ['Users', 'Formats', 'Provinces', 'Districts', 'Wards'];
		$result = $this->buildConditionReport($userInfo, $option);
		
		return $result->contain($contain)->order(['Reports.user_read' => 'ASC', 'Reports.modified' => 'DESC']);
	}
	
}